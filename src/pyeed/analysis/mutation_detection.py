from typing import Any, Optional

from loguru import logger

from pyeed.dbconnect import DatabaseConnector


class MutationDetection:
    def __init__(self) -> None:
        pass

    def get_sequence_data(
        self,
        sequence_id1: str,
        sequence_id2: str,
        db: DatabaseConnector,
        standard_numbering_tool_name: str,
        node_type: str = "Protein",
        region_ids_neo4j: Optional[list[int]] = None,
    ) -> tuple[dict[str, str], dict[str, list[str]]]:
        """Fetch sequence and position data for two sequences from the database.

        Args:
            sequence_id1: First sequence accession ID
            sequence_id2: Second sequence accession ID
            db: Database connection instance
            standard_numbering_tool_name: Name of standard numbering tool to use
            node_type: Type of node to use (default: "Protein")
            region_ids_neo4j: List of region IDs for the sequence cuting based on region_based_sequence.

        Returns:
            tuple containing:
                - dict[str, str]: Mapping of sequence IDs to sequences
                - dict[str, list[str]]: Mapping of sequence IDs to position lists

        Raises:
            ValueError: If standard numbering positions not found for both sequences
        """
        if region_ids_neo4j is not None:
            query = f"""
            MATCH (p:{node_type})-[rel:HAS_REGION]->(r:Region)
            WHERE id(r) IN $region_ids_neo4j
            MATCH (r)-[rel2:HAS_STANDARD_NUMBERING]->(s:StandardNumbering)
            WHERE p.accession_id IN ['{sequence_id1}', '{sequence_id2}'] 
            AND s.name = '{standard_numbering_tool_name}'
            RETURN p.accession_id as id, p.sequence as sequence, rel2.positions as positions, rel.start as start, rel.end as end
            """
            results = db.execute_read(
                query, parameters={"region_ids_neo4j": region_ids_neo4j}
            )
        else:
            query = f"""
            MATCH (p:{node_type})-[r:HAS_STANDARD_NUMBERING]->(s:StandardNumbering)
            WHERE p.accession_id IN ['{sequence_id1}', '{sequence_id2}'] 
            AND s.name = '{standard_numbering_tool_name}'
            RETURN p.accession_id as id, p.sequence as sequence, r.positions as positions
            """
            results = db.execute_read(query)

        if len(results) < 2:
            raise ValueError(
                f"Could not find standard numbering positions for both sequences {sequence_id1} and {sequence_id2}"
            )
        if region_ids_neo4j is not None:
            sequences = {
                results[i]["id"]: results[i]["sequence"][
                    results[i]["start"] : results[i]["end"]
                ]
                for i in range(len(results))
            }
            positions = {
                results[i]["id"]: results[i]["positions"] for i in range(len(results))
            }

            return sequences, positions
        else:
            sequences = {result["id"]: result["sequence"] for result in results}
            positions = {result["id"]: result["positions"] for result in results}
            return sequences, positions

    def find_mutations(
        self,
        seq1: str,
        seq2: str,
        pos1: list[str],
        pos2: list[str],
    ) -> dict[str, Any]:
        """Compare two sequences and identify mutations between them.

        Args:
            seq1: First amino acid sequence
            seq2: Second amino acid sequence
            pos1: Standard numbering positions for first sequence
            pos2: Standard numbering positions for second sequence

        Returns:
            dict containing mutation information:
                - from_positions: List[int] - Source positions (1-based)
                - to_positions: List[int] - Target positions (1-based)
                - from_monomers: List[str] - Source amino acids
                - to_monomers: List[str] - Target amino acids
        """
        pos_to_idx1 = {pos: idx for idx, pos in enumerate(pos1)}
        pos_to_idx2 = {pos: idx for idx, pos in enumerate(pos2)}
        common_positions = set(pos1) & set(pos2)

        from_positions = []
        to_positions = []
        from_monomers = []
        to_monomers = []

        for pos in common_positions:
            idx1 = pos_to_idx1[pos]
            idx2 = pos_to_idx2[pos]

            if seq1[idx1] != seq2[idx2]:
                from_positions.append(idx1 + 1)  # 1-based position
                to_positions.append(idx2 + 1)  # 1-based position
                from_monomers.append(seq1[idx1])
                to_monomers.append(seq2[idx2])

        return {
            "from_positions": from_positions,
            "to_positions": to_positions,
            "from_monomers": from_monomers,
            "to_monomers": to_monomers,
        }

    def save_mutations_to_db(
        self,
        mutations: dict[str, list[int | str]],
        db: DatabaseConnector,
        sequence_id1: str,
        sequence_id2: str,
        node_type: str = "Protein",
        region_ids_neo4j: Optional[list[int]] = None,
    ) -> None:
        """Save detected mutations to the database.

        Args:
            mutations: Dictionary containing mutation information:
                - from_positions: List[int] - Source positions
                - to_positions: List[int] - Target positions
                - from_monomers: List[str] - Source amino acids
                - to_monomers: List[str] - Target amino acids
            db: Database connection instance
            sequence_id1: First sequence accession ID
            sequence_id2: Second sequence accession ID
            node_type: Type of node to use (default: "Protein")
            region_ids_neo4j: List of region IDs for the sequence cuting based on region_based_sequence.
        """
        # Check if a mutation relationship already exists between these proteins
        if region_ids_neo4j is not None:
            query = f"""
            MATCH (p1:{node_type} {{accession_id: $sequence_id1}})-[rel:HAS_REGION]->(r1:Region)
            WHERE id(r1) IN $region_ids_neo4j
            MATCH (r1)-[rel_mutation:MUTATION]->(r2:Region)
            WHERE id(r2) IN $region_ids_neo4j
            MATCH (r2)<-[:HAS_REGION]-(p2:{node_type} {{accession_id: $sequence_id2}})
            RETURN rel_mutation
            """
            existing_mutations = db.execute_read(
                query,
                {
                    "sequence_id1": sequence_id1,
                    "sequence_id2": sequence_id2,
                    "region_ids_neo4j": region_ids_neo4j,
                },
            )
        else:
            existing_mutations = db.execute_read(
                f"""
                MATCH (p1:{node_type})-[r:MUTATION]->(p2:{node_type})
                WHERE p1.accession_id = $sequence_id1 AND p2.accession_id = $sequence_id2
                RETURN r
                """,
                {"sequence_id1": sequence_id1, "sequence_id2": sequence_id2},
            )
        if existing_mutations:
            logger.debug(
                f"Mutation relationship already exists between {sequence_id1} and {sequence_id2}"
            )
            return

        if region_ids_neo4j is not None:
            # saving the mutation between the regions
            query = f"""
            MATCH (r1:Region)
            WHERE id(r1) IN $region_ids_neo4j
            MATCH (r1)<-[:HAS_REGION]-(p1:{node_type} {{accession_id: $sequence_id1}})
            MATCH (r2:Region)
            WHERE id(r2) IN $region_ids_neo4j
            MATCH (r2)<-[:HAS_REGION]-(p2:{node_type} {{accession_id: $sequence_id2}})
            CREATE (r1)-[r:MUTATION]->(r2)
            SET r.from_positions = $from_positions,
                r.to_positions = $to_positions,
                r.from_monomers = $from_monomers,
                r.to_monomers = $to_monomers
            """
            params = {
                "sequence_id1": sequence_id1,
                "sequence_id2": sequence_id2,
                "region_ids_neo4j": region_ids_neo4j,
                "from_positions": mutations["from_positions"],
                "to_positions": mutations["to_positions"],
                "from_monomers": mutations["from_monomers"],
                "to_monomers": mutations["to_monomers"],
            }
            db.execute_write(query, params)
        else:
            query = f"""
            MATCH (p1:{node_type}), (p2:{node_type})
            WHERE p1.accession_id = $sequence_id1 AND p2.accession_id = $sequence_id2
            CREATE (p1)-[r:MUTATION]->(p2)
            SET r.from_positions = $from_positions,
                r.to_positions = $to_positions,
                r.from_monomers = $from_monomers,
                r.to_monomers = $to_monomers
            """
            params = {
                "sequence_id1": sequence_id1,
                "sequence_id2": sequence_id2,
                "from_positions": mutations["from_positions"],
                "to_positions": mutations["to_positions"],
                "from_monomers": mutations["from_monomers"],
                "to_monomers": mutations["to_monomers"],
            }
            db.execute_write(query, params)

        logger.debug(
            f"Saved {len(list(params['from_positions']))} mutations to database"
        )

    def get_mutations_between_sequences(
        self,
        sequence_id1: str,
        sequence_id2: str,
        db: DatabaseConnector,
        standard_numbering_tool_name: str,
        save_to_db: bool = True,
        debug: bool = False,
        node_type: str = "Protein",
        region_ids_neo4j: Optional[list[int]] = None,
    ) -> dict[str, list[int | str]]:
        """Get mutations between two sequences using standard numbering.

        Args:
            sequence_id1: First sequence accession ID
            sequence_id2: Second sequence accession ID
            db: Database connection instance
            standard_numbering_tool_name: Name of standard numbering tool to use
            save_to_db: Whether to save mutations to database (default: True)
            node_type: Type of node to use (default: "Protein")
            region_ids_neo4j: List of region IDs for the sequence cuting based on region_based_sequence.

        Returns:
            dict containing mutation information:
                - from_positions: List[int] - Source positions (1-based)
                - to_positions: List[int] - Target positions (1-based)
                - from_monomers: List[str] - Source amino acids
                - to_monomers: List[str] - Target amino acids

        Raises:
            ValueError: If standard numbering positions not found for both sequences
        """
        sequences, positions = self.get_sequence_data(
            sequence_id1,
            sequence_id2,
            db,
            standard_numbering_tool_name,
            node_type,
            region_ids_neo4j,
        )

        if debug:
            logger.info(f"Debug mode output: {sequences} and {positions}")

        mutations = self.find_mutations(
            sequences[sequence_id1],
            sequences[sequence_id2],
            positions[sequence_id1],
            positions[sequence_id2],
        )

        if save_to_db:
            self.save_mutations_to_db(
                mutations,
                db,
                sequence_id1,
                sequence_id2,
                node_type,
                region_ids_neo4j,
            )

        return mutations


if __name__ == "__main__":
    # debugging

    seq_a = "TGAGTATTCAACATTTTCGTGTCGCCCTTATTCCCTTTTTTGCGGCATTTTGCCTTCCTGTTTTTGCTCACCCAGAAACGCTGGTGAAAGTAAAAGATGCTGAAGATCAGTTGGGTGCACGAGTGGGTTACATCGAACTGGATCTCAACAGCGGTAAGATCCTTGAGAGTTTTCGCCCCGAAGAACGTTTTCCAATGATGAGCACTTTTAAAGTTCTGCTATGTGGTGCGGTATTATCCCGTGTTGACGCCGGGCAAGAGCAACTCGGTCGCCGCATACACTATTCTCAGAATGACTTGGTTGAGTACTCACCAGTCACAGAAAAGCATCTTACGGATGGCATGACAGTAAGAGAATTATGCAGTGCTGCCATAACCATGAGTGATAACACTGCGGCCAACTTACTTCTGACAACGATCGGAGGACCGAAGGAGCTAACCGCTTTTTTGCACAACATGGGGGATCATGTAACTCGCCTTGATCGTTGGGAACCGGAGCTGAATGAAGCCATACCAAACGACGAGCGTGACACCACGATGCCTGCAGCAATGGCAACAACGTTGCGCAAACTATTAACTGGCGAACTACTTACTCTAGCTTCCCGGCAACAATTAATAGACTGGATGGAGGCGGATAAAGTTGCAGGACCACTTCTGCGCTCGGCCCTTCCGGCTGGCTGGTTTATTGCTGATAAATCTGGAGCCGGTGAGCGTGGGTCTCGCGGTATCATTGCAGCACTGGGGCCAGATGGTAAGCCCTCCCGTATCGTAGTTATCTACACGACGGGGAGTCAGGCAACTATGGATGAACGAAATAGACAGATCGCTGAGATAGGTGCCTCACTGATTAAGCATTGGTAA"
    seq_b = "CACAGATAAAACACTCTCCAGGAAACCCGGGGCGGTTCAATCTGTCTATTTCGTTCATCCATAGTTGCCTGACTCCCCGTCGTGTAGATAACTACGATACGGGAGGGCTTACCATCTGGCCCCAGTGCTGCAATGATACCGCGAGACCCACGCTCACCGGCTCCAGATTTATCAGCAATAAACCAGCCAGCCGGAAGGGCCGAGCGCAGAAGTGGTCCTGCAACTTTATCCGCCTCCATCCAGTCTATTAATTGTTGCCGGGAAGCTAGAGTAAGTAGTTCGCCAGTTAATAGTTTGCGCAACGTTGTTGCCATTGCTGCAGGCATCGTGGTGTCACGCTCGTCGTTTGGTATGGCTTCATTCAGCTCCGGTTCCCAACGATCAAGGCGAGTTACATGATCCCCCATGTTGTGCAAAAAAGCGGTTAGCTCCTTCGGTCCTCCGATCGTTGTCAGAAGTAAGTTGGCAGCAGTGTTATCACTCATGGTTATGGCAGCACTGCATAATTCTCTTACTGTCATGCCATCCGTAAGATGCTTTTCTGTGACTGGTGAGTACTCAACCAAGTCATTCTGAGAATAGTGTATGCGGCGACCGAGTTGCTCTTGCCCGGCGTCAACACGGGATAATACCGCACCACATAGCAGAACTTTAAAAGTGCTCATCATTGGAAAACGTTCTTCGGGGCGAAAACTCTCAAGGATCTTACCGCTGTTGAGATCCAGTTCGATGTAACCCACTCGTGCACCCAACTGATCTTCAGCATCTTTTACTTTCACCAGCGTTTCTGGGTGAGCAAAAACAGGAAGGCAAAATGCCGCAAAAAAGGGAATAAGGGCGACACGAAAATGTTGAATACTCAT"
    pos_a = [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        235,
        236,
        237,
        238,
        239,
        240,
        241,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250,
        251,
        252,
        253,
        254,
        255,
        256,
        257,
        258,
        259,
        260,
        261,
        262,
        263,
        264,
        265,
        266,
        267,
        268,
        269,
        270,
        271,
        272,
        273,
        274,
        275,
        276,
        277,
        278,
        279,
        280,
        281,
        282,
        283,
        284,
        285,
        286,
        287,
        288,
        289,
        290,
        291,
        292,
        293,
        294,
        295,
        296,
        297,
        298,
        299,
        300,
        301,
        302,
        303,
        304,
        305,
        306,
        307,
        308,
        309,
        310,
        311,
        312,
        313,
        314,
        315,
        316,
        317,
        318,
        319,
        320,
        321,
        322,
        323,
        324,
        325,
        326,
        327,
        328,
        329,
        330,
        331,
        332,
        333,
        334,
        335,
        336,
        337,
        338,
        339,
        340,
        341,
        342,
        343,
        344,
        345,
        346,
        347,
        348,
        349,
        350,
        351,
        352,
        353,
        354,
        355,
        356,
        357,
        358,
        359,
        360,
        361,
        362,
        363,
        364,
        365,
        366,
        367,
        368,
        369,
        370,
        371,
        372,
        373,
        374,
        375,
        376,
        377,
        378,
        379,
        380,
        381,
        382,
        383,
        384,
        385,
        386,
        387,
        388,
        389,
        390,
        391,
        392,
        393,
        394,
        395,
        396,
        397,
        398,
        399,
        400,
        401,
        402,
        403,
        404,
        405,
        406,
        407,
        408,
        409,
        410,
        411,
        412,
        413,
        414,
        415,
        416,
        417,
        418,
        419,
        420,
        421,
        422,
        423,
        424,
        425,
        426,
        427,
        428,
        429,
        430,
        431,
        432,
        433,
        434,
        435,
        436,
        437,
        438,
        439,
        440,
        441,
        442,
        443,
        444,
        445,
        446,
        447,
        448,
        449,
        450,
        451,
        452,
        453,
        454,
        455,
        456,
        457,
        458,
        459,
        460,
        461,
        462,
        463,
        464,
        465,
        466,
        467,
        468,
        469,
        470,
        471,
        472,
        473,
        474,
        475,
        476,
        477,
        478,
        479,
        480,
        481,
        482,
        483,
        484,
        485,
        486,
        487,
        488,
        489,
        490,
        491,
        492,
        493,
        494,
        495,
        496,
        497,
        498,
        499,
        500,
        501,
        502,
        503,
        504,
        505,
        506,
        507,
        508,
        509,
        510,
        511,
        512,
        513,
        514,
        515,
        516,
        517,
        518,
        519,
        520,
        521,
        522,
        523,
        524,
        525,
        526,
        527,
        528,
        529,
        530,
        531,
        532,
        533,
        534,
        535,
        536,
        537,
        538,
        539,
        540,
        541,
        542,
        543,
        544,
        545,
        546,
        547,
        548,
        549,
        550,
        551,
        552,
        553,
        554,
        555,
        556,
        557,
        558,
        559,
        560,
        561,
        562,
        563,
        564,
        565,
        566,
        567,
        568,
        569,
        570,
        571,
        572,
        573,
        574,
        575,
        576,
        577,
        578,
        579,
        580,
        581,
        582,
        583,
        584,
        585,
        586,
        587,
        588,
        589,
        590,
        591,
        592,
        593,
        594,
        595,
        596,
        597,
        598,
        599,
        600,
        601,
        602,
        603,
        604,
        605,
        606,
        607,
        608,
        609,
        610,
        611,
        612,
        613,
        614,
        615,
        616,
        617,
        618,
        619,
        620,
        621,
        622,
        623,
        624,
        625,
        626,
        627,
        628,
        629,
        630,
        631,
        632,
        633,
        634,
        635,
        636,
        637,
        638,
        639,
        640,
        641,
        642,
        643,
        644,
        645,
        646,
        647,
        648,
        649,
        650,
        651,
        652,
        653,
        654,
        655,
        656,
        657,
        658,
        659,
        660,
        661,
        662,
        663,
        664,
        665,
        666,
        667,
        668,
        669,
        670,
        671,
        672,
        673,
        674,
        675,
        676,
        677,
        678,
        679,
        680,
        681,
        682,
        683,
        684,
        685,
        686,
        687,
        688,
        689,
        690,
        691,
        692,
        693,
        694,
        695,
        696,
        697,
        698,
        699,
        700,
        701,
        702,
        703,
        704,
        705,
        706,
        707,
        708,
        709,
        710,
        711,
        712,
        713,
        714,
        715,
        716,
        717,
        718,
        719,
        720,
        721,
        722,
        723,
        724,
        725,
        726,
        727,
        728,
        729,
        730,
        731,
        732,
        733,
        734,
        735,
        736,
        737,
        738,
        739,
        740,
        741,
        742,
        743,
        744,
        745,
        746,
        747,
        748,
        749,
        750,
        751,
        752,
        753,
        754,
        755,
        756,
        757,
        758,
        759,
        760,
        761,
        762,
        763,
        764,
        765,
        766,
        767,
        768,
        769,
        770,
        771,
        772,
        773,
        774,
        775,
        776,
        777,
        778,
        779,
        780,
        781,
        782,
        783,
        784,
        785,
        786,
        787,
        788,
        789,
        790,
        791,
        792,
        793,
        794,
        795,
        796,
        797,
        798,
        799,
        800,
        801,
        802,
        803,
        804,
        805,
        806,
        807,
        808,
        809,
        810,
        811,
        812,
        813,
        814,
        815,
        816,
        817,
        818,
        819,
        820,
        821,
        822,
        823,
        824,
        825,
        826,
        827,
        828,
        829,
        830,
        831,
        832,
        833,
        834,
        835,
        836,
        837,
        838,
        839,
        840,
        841,
        842,
        843,
        844,
        845,
        846,
        847,
        848,
        849,
        850,
        851,
        852,
        853,
        854,
        855,
        856,
        857,
        858,
        859,
        860,
    ]
    pos_b = [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        46.1,
        47,
        48,
        49,
        50,
        51,
        52,
        52.1,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        193.1,
        193.2,
        193.3,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        235,
        236,
        237,
        238,
        239,
        240,
        241,
        242,
        242.1,
        242.2,
        242.3,
        242.4,
        242.5,
        242.6,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250,
        251,
        252,
        253,
        253.1,
        253.2,
        253.3,
        254,
        255,
        256,
        257,
        258,
        259,
        260,
        261,
        262,
        263,
        264,
        265,
        266,
        267,
        268,
        269,
        270,
        271,
        272,
        275,
        276,
        277,
        278,
        279,
        280,
        281,
        282,
        283,
        284,
        285,
        286,
        287,
        288,
        289,
        290,
        291,
        292,
        295,
        296,
        297,
        298,
        299,
        300,
        301,
        302,
        303,
        304,
        305,
        306,
        307,
        308,
        309,
        310,
        311,
        312,
        313,
        314,
        315,
        316,
        317,
        318,
        319,
        320,
        321,
        324,
        325,
        326,
        327,
        328,
        329,
        330,
        331,
        332,
        333,
        334,
        335,
        336,
        337,
        338,
        339,
        340,
        341,
        342,
        343,
        344,
        345,
        346,
        347,
        349,
        350,
        351,
        352,
        353,
        354,
        355,
        356,
        357,
        358,
        359,
        360,
        361,
        362,
        363,
        364,
        365,
        366,
        367,
        368,
        369,
        370,
        371,
        373,
        374,
        375,
        376,
        377,
        378,
        379,
        380,
        381,
        382,
        383,
        384,
        385,
        386,
        387,
        388,
        389,
        390,
        391,
        392,
        393,
        394,
        395,
        396,
        397,
        398,
        399,
        400,
        401,
        402,
        403,
        404,
        405,
        406,
        407,
        408,
        409,
        410,
        411,
        412,
        413,
        414,
        415,
        416,
        417,
        418,
        419,
        420,
        421,
        421.1,
        421.2,
        422,
        423,
        424,
        425,
        426,
        427,
        428,
        429,
        430,
        431,
        432,
        433,
        434,
        435,
        436,
        437,
        438,
        439,
        440,
        441,
        442,
        443,
        444,
        445,
        446,
        447,
        448,
        449,
        450,
        451,
        452,
        453,
        454,
        455,
        456,
        457,
        458,
        459,
        460,
        461,
        462,
        463,
        464,
        465,
        466,
        466.1,
        467,
        468,
        468.1,
        469,
        470,
        471,
        472,
        473,
        474,
        475,
        476,
        477,
        478,
        479,
        480,
        481,
        482,
        483,
        484,
        485,
        486,
        487,
        488,
        489,
        490,
        491,
        492,
        493,
        494,
        495,
        496,
        497,
        498,
        499,
        500,
        501,
        502,
        503,
        504,
        505,
        506,
        507,
        508,
        509,
        510,
        511,
        512,
        513,
        514,
        515,
        516,
        517,
        518,
        519,
        520,
        521,
        522,
        523,
        524,
        525,
        526,
        527,
        528,
        529,
        530,
        531,
        532,
        533,
        534,
        535,
        536,
        537,
        538,
        539,
        540,
        541,
        542,
        543,
        544,
        545,
        546,
        547,
        548,
        549,
        550,
        551,
        552,
        553,
        554,
        555,
        556,
        557,
        558,
        559,
        560,
        561,
        561.1,
        561.2,
        562,
        563,
        564,
        565,
        566,
        567,
        568,
        569,
        570,
        571,
        572,
        572.1,
        572.2,
        573,
        574,
        575,
        576,
        577,
        578,
        579,
        580,
        581,
        582,
        583,
        584,
        585,
        586,
        587,
        588,
        589,
        590,
        591,
        592,
        593,
        594,
        595,
        596,
        597,
        598,
        599,
        600,
        601,
        602,
        603,
        604,
        605,
        606,
        607,
        608,
        609,
        610,
        611,
        612,
        613,
        614,
        615,
        616,
        616.1,
        617,
        618,
        619,
        620,
        621,
        622,
        623,
        624,
        625,
        626,
        627,
        628,
        629,
        630,
        631,
        632,
        633,
        634,
        635,
        636,
        637,
        638,
        639,
        640,
        641,
        642,
        643,
        644,
        645,
        646,
        647,
        648,
        649,
        650,
        651,
        652,
        653,
        654,
        655,
        656,
        657,
        658,
        660,
        661,
        662,
        663,
        664,
        665,
        666,
        667,
        668,
        669,
        670,
        671,
        672,
        673,
        674,
        675,
        676,
        677,
        680,
        681,
        682,
        683,
        684,
        685,
        686,
        687,
        688,
        689,
        690,
        691,
        692,
        693,
        694,
        695,
        696,
        697,
        698,
        699,
        700,
        701,
        702,
        703,
        704,
        705,
        706,
        707,
        708,
        709,
        710,
        711,
        712,
        713,
        714,
        715,
        716,
        717,
        719,
        720,
        721,
        722,
        723,
        724,
        725,
        726,
        727,
        728,
        732,
        733,
        734,
        735,
        736,
        737,
        738,
        739,
        740,
        741,
        742,
        743,
        744,
        745,
        746,
        747,
        748,
        749,
        750,
        751,
        752,
        753,
        754,
        755,
        756,
        757,
        758,
        759,
        760,
        761,
        762,
        763,
        764,
        765,
        766,
        767,
        768,
        769,
        771,
        772,
        773,
        774,
        775,
        776,
        777,
        778,
        779,
        780,
        781,
        782,
        783,
        784,
        785,
        786,
        787,
        788,
        789,
        790,
        791,
        792,
        793,
        794,
        795,
        796,
        797,
        798,
        799,
        801,
        802,
        803,
        804,
        805,
        806,
        807,
        808,
        809,
        810,
        811,
        812,
        813,
        814,
        815,
        816,
        817,
        818,
        819,
        820,
        821,
        822,
        823,
        824,
        825,
        826,
        827,
        828,
        829,
        830,
        831,
        832,
        833,
        834,
        835,
        836,
        837,
        838,
        839,
        840,
        841,
        842,
        843,
        844,
        845,
        846,
        847,
        848,
        849,
        850,
        851,
        852,
        853,
        854,
        855,
        856,
        857,
        858,
        859,
        860,
    ]

    pos_a = [str(i) for i in pos_a]
    pos_b = [str(i) for i in pos_b]

    print(seq_a)
    print(seq_b)

    mutation_detection = MutationDetection()

    print(mutation_detection.find_mutations(seq_a, seq_b, pos_a, pos_b))
